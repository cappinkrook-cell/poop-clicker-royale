import { Net } from './net'; import { Game } from './game'; import { applyAdVisibility, maybeHandleProFlag } from './ui'; const SERVER_URL=(import.meta as any).env.VITE_SERVER_URL||'http://localhost:8080'; function uid(len=4){const s=Math.random().toString(36).slice(2,2+len); return s.padEnd(len,'x');} function getRoom(){ const url=new URL(location.href); return url.searchParams.get('room')||'global'; } function newPrivateRoom(){ const code=uid(5); const url=new URL(location.href); url.searchParams.set('room',code); location.href=url.toString(); } function getName(){ let name=localStorage.getItem('name'); if(!name){ name=`Player_${uid(6)}`; localStorage.setItem('name',name);} return name;} function bindUI(net:Net,game:Game){ const nameInput=document.getElementById('nameInput') as HTMLInputElement; nameInput.value=game.name; nameInput.addEventListener('change',()=>{ const v=nameInput.value.trim().slice(0,14)||getName(); localStorage.setItem('name',v); game.name=v; net.setName(v); }); document.getElementById('roomName')!.textContent=game.room; document.getElementById('shareBtn')!.addEventListener('click',async()=>{ const u=new URL(location.href); u.searchParams.set('room',game.room); await navigator.clipboard.writeText(u.toString()); alert('Room link copied!'); }); document.getElementById('globalLink')!.addEventListener('click',(e)=>{ e.preventDefault(); const u=new URL(location.href); u.searchParams.delete('room'); location.href=u.toString(); }); document.getElementById('privateLink')!.addEventListener('click',(e)=>{ e.preventDefault(); newPrivateRoom(); }); const rmAds=document.getElementById('removeAds') as HTMLAnchorElement; rmAds.addEventListener('click',(e)=>{ e.preventDefault(); alert('To remove ads, connect Stripe and return with ?pro=1'); }); } async function boot(){ maybeHandleProFlag(); applyAdVisibility(); const name=getName(); const room=getRoom(); const canvas=document.getElementById('game') as HTMLCanvasElement; const net=new Net(); const game=new Game(canvas,net,name,room); bindUI(net,game); net.onSpawn=(s)=>game.handleSpawn(s); net.onDespawn=(id)=>game.handleDespawn(id); net.onClaim=(who,id,scores)=>game.handleClaim(who,id,scores); net.onTick=(snap)=>{ game.setTimer(snap.timeLeft); game.setScores(snap.scores); for(const s of snap.items) game.items.set(s.id,s); for(const id of Array.from(game.items.keys())){ if(!snap.items.find(i=>i.id===id)) game.items.delete(id); } }; net.onIntermission=({},scores)=>game.handleIntermission('New round in 5sâ€¦',scores); net.onStart=()=>{}; net.connect(SERVER_URL,name,room);} boot();