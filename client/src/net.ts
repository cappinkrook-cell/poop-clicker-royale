import { io, Socket } from 'socket.io-client'; export type Spawn={id:string,x:number,y:number,v:number,t:number}; export type Scores=Record<string,number>; export type Snapshot={timeLeft:number,items:Spawn[],scores:Scores,room:string,state:'playing'|'intermission'}; export class Net{socket!:Socket; onSpawn=(s:Spawn)=>{}; onDespawn=(id:string)=>{}; onClaim=(who:string,id:string,scores:Scores)=>{}; onTick=(snap:Snapshot)=>{}; onIntermission=(msg:string,scores:Scores)=>{}; onStart=(msg:string)=>{}; connect(serverUrl:string,name:string,room:string){ this.socket=io(serverUrl,{transports:['websocket'],autoConnect:true}); this.socket.on('connect',()=>{ this.socket.emit('join',{name,room}); this.socket.emit('request_state'); }); this.socket.on('spawn',(s:Spawn)=>this.onSpawn(s)); this.socket.on('despawn',(id:string)=>this.onDespawn(id)); this.socket.on('claimed',({who,id,scores}:{who:string,id:string,scores:Scores})=>this.onClaim(who,id,scores)); this.socket.on('tick',(snap:Snapshot)=>this.onTick(snap)); this.socket.on('intermission',({msg,scores}:{msg:string,scores:Scores})=>this.onIntermission(msg,scores)); this.socket.on('start',({msg}:{msg:string})=>this.onStart(msg)); } hit(id:string){ this.socket?.emit('hit',{id}); } setName(name:string){ this.socket?.emit('rename',{name}); } }