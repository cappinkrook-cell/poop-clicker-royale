import { Net, Spawn } from './net'; import { updateScores, setTimer, overlay } from './ui'; const W=800,H=480; const EMOJI=['ðŸ’©','ðŸ’©','ðŸ’©','ðŸ’©','ðŸ’©','ðŸ’ŽðŸ’©','ðŸŒˆðŸ’©','ðŸ˜¡ðŸ’©']; const VALUES=[1,1,1,1,2,5,3,4]; export class Game{ canvas:HTMLCanvasElement; ctx:CanvasRenderingContext2D; items=new Map<string,Spawn>(); myScore=0; name:string; net:Net; room:string; timeLeft=30; constructor(canvas:HTMLCanvasElement,net:Net,name:string,room:string){ this.canvas=canvas; this.ctx=canvas.getContext('2d')!; this.net=net; this.name=name; this.room=room; canvas.addEventListener('click',this.onClick); requestAnimationFrame(this.loop); } loop=()=>{ this.draw(); requestAnimationFrame(this.loop); }; draw(){ const ctx=this.ctx; ctx.clearRect(0,0,W,H); ctx.globalAlpha=.06; ctx.fillStyle='#fff'; for(let x=0;x<W;x+=40) ctx.fillRect(x,0,1,H); for(let y=0;y<H;y+=40) ctx.fillRect(0,y,W,1); ctx.globalAlpha=1; for(const s of this.items.values()){ ctx.save(); ctx.font='28px serif'; ctx.textAlign='center'; ctx.textBaseline='middle'; ctx.fillText(EMOJI[Math.min(EMOJI.length-1,VALUES.indexOf(s.v))]||'ðŸ’©',s.x,s.y); ctx.restore(); } ctx.fillStyle='#e9e9ee'; ctx.font='14px ui-sans-serif,system-ui'; ctx.fillText(`Room: ${this.room}`,10,18); } onClick=(e:MouseEvent)=>{ const rect=this.canvas.getBoundingClientRect(); const mx=(e.clientX-rect.left)*(this.canvas.width/rect.width); const my=(e.clientY-rect.top)*(this.canvas.height/rect.height); let target:Spawn|null=null; for(const s of this.items.values()){ const dx=s.x-mx, dy=s.y-my; if(Math.hypot(dx,dy)<20){ target=s; break; } } if(target) this.net.hit(target.id); }; setTimer(t:number){ this.timeLeft=t; setTimer(document.getElementById('timer')!,t); } setScores(scores:Record<string,number>){ updateScores(document.getElementById('scores') as HTMLOListElement, scores, this.name); const me=scores[this.name]||0; this.myScore=me; (document.getElementById('myScore')!).textContent=String(me); } handleSpawn=(s:Spawn)=>{ this.items.set(s.id,s); }; handleDespawn=(id:string)=>{ this.items.delete(id); }; handleClaim=(_who:string,id:string,scores:Record<string,number>)=>{ this.items.delete(id); this.setScores(scores); }; handleIntermission=(msg:string,scores:Record<string,number>)=>{ overlay('Round Over',msg); this.setScores(scores); }; }